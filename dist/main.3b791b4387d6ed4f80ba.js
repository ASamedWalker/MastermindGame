(()=>{"use strict";const e={easy:{codeLength:3,maxNumber:5},normal:{codeLength:4,maxNumber:7},hard:{codeLength:5,maxNumber:9}},t=new class{async fetchRandomNumbers(t){const{codeLength:n,maxNumber:r}=e[t],o=`https://www.random.org/integers/?num=${n}&min=0&max=${r}&col=1&base=10&format=plain&rnd=new`,s=await fetch(o,{method:"GET"}),a=(await s.text()).split("\n").slice(0,n);return a.length>0?a:this.generateRandomNumbers()}#e(){return["0","1","2","3"]}},n="highscores",r={easy:{codeLength:3,maxNumber:5},normal:{codeLength:4,maxNumber:7},hard:{codeLength:5,maxNumber:9}};let o={difficulty:null,secretCode:[],guessedCode:[],currentTurn:1,highscores:[],startTime:null,occurrenceStatus:{}};const s=()=>o.difficulty,a=()=>o.secretCode,i=()=>o.guessedCode,c=()=>o.currentTurn,l=()=>{o.guessedCode=[]},d=()=>o.highscores,u=e=>{o.highscores=e},h=new class{#t=document.querySelector(".game-board-view");renderBoard(e){this.#t.innerHTML="";for(let t=1;t<=10;t++){const n=`\n            <div class="game-try" data-turn="${t}">\n                <span>Turn ${t}</span>\n                <div class="choice-row">\n                    ${this.getHTMLForChoices(e)}\n                </div>\n\n                <div class="occurrence-status-row" data-turn="${t}">\n                    ${this.getHTMLForOccurrenceStatusFlags(e)}\n                </div>\n            </div>\n            `;this.#t.insertAdjacentHTML("afterbegin",n)}}getHTMLForChoices(t){let n="";for(let r=0;r<e[t].codeLength;r++)n+=`<div class="choice choice-number" data-choice="${r}"><span class="number"></span></div>`;return n}getHTMLForOccurrenceStatusFlags(t){let n="";for(let r=0;r<e[t].codeLength;r++)n+=`<div class="choice occurrence-status-flag" data-occurrence-status="${r}"></div>`;return n}},g=new class{#n="current-turn";#r="played-turn";updateTurn(e,t=!0){document.querySelector(`[data-turn="${e}"]`).classList.add(`${t?this.#n:this.#r}`)}},m=new class{#t=document.querySelector(".number-picker-view");renderButtonPanel(e){this.#t.innerHTML="";let t="";t+=this.getHTMLForNumberPickerButtons(e),t+=this.getHTMLForControlButtons(),this.#t.insertAdjacentHTML("beforeend",t)}getHTMLForNumberPickerButtons(t){let n="";for(let r=0;r<=e[t].maxNumber;r++)n+=`<button class="choice-btn" data-selected-number="${r}">${r}</button>`;return n}getHTMLForControlButtons(){return'\n      <button class="control-btn" data-control="undo">Undo</button>\n      <button class="control-btn" data-control="submit">Submit</button>\n    '}},b=new class{renderCodeCombination(e,t,n){const o=document.querySelector(`[data-turn="${e}"]`);for(let e=0;e<r[n].codeLength;e++){const n=o.querySelector(`[data-choice="${e}"] span`);void 0!==t[e]?n.innerHTML=t[e]:n.innerHTML=""}}},p=new class{#o(e){const{inPlaceCount:t,changedPlaceCount:n,wrongCount:r}=e;return("red ".repeat(t)+"white ".repeat(n)+"black ".repeat(r)).trim().split(" ")}renderOccurrenceStatus(e,t,n){console.log(t);const o=this.#o(t),s=document.querySelector(`.game-try [data-turn="${e}"]`);for(let e=0;e<r[n].codeLength;e++)s.querySelector(`[data-occurrence-status="${e}"]`).style.backgroundColor=o[e]}},w=new class{#t=document.querySelector(".alert-view");renderHighscores(e){this.#t.innerHTML="";let t='\n      <div class="high-score-display">\n      <h1>Top 10 High Scores</h1>\n      <button class="btn-close-alert">X</button>\n      <ul class="high-score-container">\n    ';e.forEach(((e,n)=>{t+=`\n        <li class="high-score-item">\n          <span>${n+1}</span>\n          <span class="high-score-username">${e.playerName}</span>\n          <span class="high-score-moves">${e.numOfTries} tries</span> \n          <span class="high-score-time">${function(e){const t=`${Math.floor(e/1e3%60)}`.padStart(2,0),n=`${Math.floor(e/1e3/60%60)}`.padStart(2,0),r=`${Math.floor(e/1e3/3600%24)}`.padStart(2,0);return`${"00"==r?"":`${r}h `}${n}min ${t}s`}(+e.duration)}</span>\n        </li>\n      `})),t+="</ul></div>",this.#t.insertAdjacentHTML("afterbegin",t)}},y=new class{#t=document.querySelector(".alert-view");#s=document.querySelector(".overlay");#a=null;constructor(e){this.#a=e}showModalForGameRules(){this.#t.innerHTML="",this.#t.insertAdjacentHTML("afterbegin",'\n      <div class="game-rules">\n        <button class="btn-close-alert">X</button>\n        <h1>Game Rules</h1>\n        <p>\n          Mastermind is a two-sided code-solving game played by a computer(codemaker) and a user/player(codebreaker). \n          Using a series of randomly generated numbers ranging from (0 - 7), the codemaker chooses a pattern code and conceals it in their gameplay area. \n          The codebreaker then begins trying to break the code by inserting various number combinations for each turn, hoping to break it within 10 chances. \n          In turn, the codemaker responds with feedback telling the codebreaker how close they are to winning. \n          At the start of the game, the player chooses the level of difficulty he/she prefers.\n        </p>\n        <p>\n          Then the player clicks the new game button. \n          Once the game pops up, the player now has the opportunity to interact with the game by attempting to input a code to break the code set by the codemaker. \n          The codemaker then gives feedback at the end of each attempt made by the codebreaker. The feedback provided by the codemaker would be responses like\n          The player had to guess a correct number\n          The player had guessed a correct number and its correct location\n          The player’s guess was incorrect.\n        </p>\n        <p>\n          This response would be substituted with two flag which represent the color red, white, and flags in the game. \n          Each red flag would correspond to the feedback the player had guess a correct number and it’s correct location. \n          Each white flag corresponds to the feedback the player had guessed a correct number. \n          Each black flag would correspond to feedback that the player’s guess was incorrect.\n        </p>\n      </div>\n    '),this.toggleAlert()}showModalForCredits(){this.#t.innerHTML="",this.#t.insertAdjacentHTML("afterbegin",'\n      <div class="credits">\n        <button class="btn-close-alert">X</button>\n        <h1>Credits</h1>\n        <p>\n         About Abdul Samed Walker\n        </p>\n      </div>\n    '),this.toggleAlert()}showModalForHighscores(e){this.#t.innerHTML="",this.#a.renderHighscores(e),this.toggleAlert()}showAlertForWinningCondition(){this.#t.innerHTML="",this.#t.insertAdjacentHTML("afterbegin",'\n      <p class="message">You broke the secret code!</p>\n      <label for="name">Input your name:</label>\n      <input type="text" id="playerName" />\n      <button class="btn-submit-highscore">Submit</button>\n    '),this.toggleAlert()}showAlertForLosingCondition(e,t){this.#t.innerHTML="";let n='\n      <button class="btn-close-alert">X</button>\n      <p class="message">Sorry! You didn\'t break the code!</p>\n      <p class="message">Secret code was:</p>\n      <div class="secret-container">';for(let o=0;o<r[t].codeLength;o++)n+=`<div class="choice choice-number"><span class="number">${e[o]}</span></div>`;n+="</div>",this.#t.insertAdjacentHTML("afterbegin",n),this.toggleAlert()}showAlertOnInvalidInput(e){this.#t.innerHTML="";const t=`<button class="btn-close-alert">X</button><p class="message">Code length needs to be ${r[e].codeLength}!</p>`;this.#t.insertAdjacentHTML("afterbegin",t),this.toggleAlert()}toggleAlert(){this.#t.classList.toggle("hidden"),this.#s.classList.toggle("hidden")}}(w),T=new class{#i=null;#c=null;#l=null;#d=null;#u=null;#a=null;#h=null;constructor(e,t,n,r,o,s,a){this.#i=e,this.#c=t,this.#l=n,this.#d=r,this.#u=o,this.#a=s,this.#h=a}displayGame(){const e=document.querySelector(".game-wrapper"),t=document.querySelector(".game-menu");e.style.display="block",t.style.display="none"}renderBoard(e){this.#i.renderBoard(e)}updateTurn(e,t=!0){this.#c.updateTurn(e,t)}renderButtonPanel(e){this.#l.renderButtonPanel(e)}renderCodeCombination(e,t,n){this.#d.renderCodeCombination(e,t,n)}renderOccurrenceStatus(e,t,n){this.#u.renderOccurrenceStatus(e,t,n)}renderHighscores(e){this.#a.renderHighscores(e)}showAlertOnInvalidInput(e){this.#h.showAlertOnInvalidInput(e)}showAlertForWinningCondition(){this.#h.showAlertForWinningCondition()}showAlertForLosingCondition(e,t){this.#h.showAlertForLosingCondition(e,t)}showModalForGameRules(){this.#h.showModalForGameRules()}showModalForCredits(){this.#h.showModalForCredits()}showModalForHighscores(e){this.#h.showModalForHighscores(e)}toggleAlert(){this.#h.toggleAlert()}}(h,g,m,b,p,w,y),f=new class{addEventListenerForNewGame(e){document.querySelector('[data-menu-item="new-game"]').addEventListener("click",(()=>{const t=document.querySelector('input[name="difficulty"]:checked').value;e(t)}))}addEventListenersToMenuButtons(e){const t=document.querySelector(".game-menu").querySelectorAll("button");for(let n of t)n.addEventListener("click",e.bind(this,n))}addEventListenersToPanelButtons(e){const t=document.querySelector(".number-picker-view").querySelectorAll("button");for(let n of t)n.addEventListener("click",e.bind(this,n))}addEventListenerToCloseButton(e){document.querySelector(".alert-view").querySelector(".btn-close-alert").addEventListener("click",e)}addEventToSubmitButton(e){document.querySelector(".alert-view").querySelector(".btn-submit-highscore").addEventListener("click",(()=>{const t=document.getElementById("playerName").value;e(t)}))}},v=new class{constructor(){const e=localStorage.getItem(n);console.log(e),null!==e&&u(JSON.parse(e))}clearHighscores(){localStorage.clear(n)}addScore(e){d().push(e),this.#g(),u(this.#m()),this.#b()}#m(){return d().slice(0,10)}#g(){return d().sort(((e,t)=>e.numOfTries>t.numOfTries?1:e.numOfTries<t.numOfTries?-1:e.duration>t.duration?1:e.duration<t.duration?-1:void 0))}#b(){localStorage.setItem(n,JSON.stringify(d()))}},L=()=>{T.toggleAlert()},C=()=>{T.toggleAlert(),V(s())},S=()=>{T.toggleAlert(),V(s())},M=e=>{v.addScore({playerName:e,numOfTries:c(),duration:new Date-o.startTime}),T.renderHighscores(d()),f.addEventListenerToCloseButton(C)},H=e=>{const{secretCode:t,guessedCode:n,currentTurn:r}=o;let{control:s,selectedNumber:a}=e.dataset;"submit"===s?k():"undo"===s?A():F(a)},k=()=>{if(i().length!==r[s()].codeLength)return T.showAlertOnInvalidInput(s()),void f.addEventListenerToCloseButton(L);var e;e=N(a(),i()),o.occurrenceStatus=e,T.renderOccurrenceStatus(c(),o.occurrenceStatus,s()),$(),T.updateTurn(c())},A=()=>{i().length<1||(i().pop(),T.renderCodeCombination(c(),i(),s()))},F=e=>{i().length<r[s()].codeLength&&i().push(e),T.renderCodeCombination(c(),i(),s())},V=e=>{(async e=>{var n;(e=>{o.difficulty=e})(e),l(),o.currentTurn=1,o.startTime=new Date,n=await t.fetchRandomNumbers(e),o.secretCode=n})(e),T.renderBoard(s()),T.updateTurn(c()),T.renderButtonPanel(s()),T.displayGame(),f.addEventListenersToPanelButtons(H)};f.addEventListenerForNewGame((e=>{V(e)})),f.addEventListenersToMenuButtons((e=>{let{menuItem:t}=e.dataset;"display-rules"===t?(T.showModalForGameRules(),f.addEventListenerToCloseButton(L)):"display-about"===t?(T.showModalForCredits(),f.addEventListenerToCloseButton(L)):"display-highscores"===t&&T.showModalForHighscores(d())}));const $=()=>{B()?(T.showAlertForWinningCondition(),f.addEventToSubmitButton(M)):E()?(T.showAlertForLosingCondition(a(),s()),f.addEventListenerToCloseButton(S)):(o.currentTurn++,l())},B=()=>i().join("")===a().join(""),E=()=>10===c(),N=(e,t)=>{let n=0,r=0,o=0;for(let s=0;s<t.length;s++){const a=e.indexOf(t[s]);t[s]===e[s]?n++:-1!==a&&s!==a?r++:o++}return{inPlaceCount:n,changedPlaceCount:r,wrongCount:o}}})();